class PlayedGame {

	// Import necessary librairies and files here
	depend java.awt.geom.Rectangle2D;
	depend java.awt.geom.Line2D;
	depend ca.mcgill.ecse223.block.model.BouncePoint.BounceDirection;

	// State Machine

	playStatus
	{
    Ready {
      entry / { doSetup(); }
      play -> Moving;
    }
    Moving {
      pause -> Paused;
      move [hitPaddle()] / { doHitPaddleOrWall(); } -> Moving;
      move [isOutOfBoundsAndLastLife()] / { doOutOfBounds(); } -> GameOver;
      move [isOutOfBounds()] / { doOutOfBounds(); } -> Paused;
      move [hitLastBlockAndLastLevel()] / { doHitBlock(); } -> GameOver;
      move [hitLastBlock()] / { doHitBlockNextLevel(); } -> Ready;
      move [hitBlock()] / { doHitBlock(); } -> Moving;
      move [hitWall()] / { doHitPaddleOrWall(); } -> Moving;
      move / { doHitNothingAndNotOutOfBounds(); } -> Moving;
    }
    Paused {
      play -> Moving;
    }
    GameOver {
      entry / { doGameOver(); }
    }
  }

	// Guards

	/**
	 * This returns true if the ball hits the paddle.
	 * 
	 * @author Kelly Ma
	 * @return Whether or not the ball hits paddle
	 */
	private boolean hitPaddle() {
		BouncePoint bp = calculateBouncePointPaddle();
		setBounce(bp);
		return bp != null;
	}

	/**
	 * This returns true if the ball is out of bounds and is last life.
	 * 
	 * @author Georges Mourant
	 * @return if ball is out of bounds and last life
	 */
	private boolean isOutOfBoundsAndLastLife() {
		boolean outOfBounds = false;
		if (this.getLives() == 1)
			outOfBounds = isBallOutOfBounds();
		return outOfBounds;
	}

	/**
	 * This returns true if the ball is out of bounds.
	 * 
	 * @author Georges Mourant
	 * @return if ball is out of bounds and last life
	 */
	private boolean isOutOfBounds() {
		return isBallOutOfBounds();
	}

	private boolean hitLastBlockAndLastLevel() {

		// Obtain current game, get number of levels
		Game game = this.getGame();
		int nrLevels = game.numberOfLevels();

		// Remove bouncepoint
		this.setBounce(null);

		// Check if game is at last level
		if (nrLevels == currentLevel) {
			int nrBlocks = numberOfBlocks();
			// Check if game is at the last block
			if (nrBlocks == 1) {
				PlayedBlockAssignment pblock = this.getBlock(0);
				BouncePoint bp = calculateBouncePointBlock(pblock);
				setBounce(bp);
				return (bp != null);
			}
		}
		return false;
	}

	/**
	 * This method returns true if the ball hits the last block.
	 * 
	 * @author Mathieu Bissonnette
	 */

	private boolean hitLastBlock() {

		// Check # of blocks and set bouncepoint to null
		int nrBlocks = numberOfBlocks();
		setBounce(null);

		// Check if there's only one block left (last block)
		if (nrBlocks == 1) {
			PlayedBlockAssignment block = this.getBlock(0);
			BouncePoint bp = calculateBouncePointBlock(block);
			setBounce(bp);
			return (bp != null);
		}
		return false;

	}

	/**
	 * This method returns true if the ball hits a block.
	 * 
	 * @author Mathieu Bissonnette
	 */

	private boolean hitBlock() {

		// Check # blocks, set bouncepoint to null
		int nrBlocks = numberOfBlocks();
		setBounce(null);

		// Calculate bouncepoint for block in game
		for (PlayedBlockAssignment block : getBlocks()) {
			BouncePoint bp = calculateBouncePointBlock(block);
			bounce = getBounce(); // Get their respective bounce point
			boolean bpIsCloser = isCloser(bp, bounce); // Check if the bouncepoint is closer
			if (bpIsCloser) {
				bp.setHitBlock(block);
				setBounce(bp);
			}
		}
		return getBounce() != null;

	}

	/**
	 * This returns true if the ball hits a wall.
	 * 
	 * @author Kelly Ma
	 * @return Whether or not the ball hits wall
	 */
	private boolean hitWall() {
		BouncePoint bp = calculateBouncePointWall();
		setBounce(bp);
		return bp != null;
	}

	// Actions

	/**
	 * This private method returns the setup for the Played Game by resetting the
	 * ball positions and paddle positions and by adding random block positions if
	 * there is less blocks than the set number of blocks/level.
	 * 
	 * @author Imane Chafi
	 */
	private void doSetup() {

		// Reset current ball locations, ball directions, and paddle
		resetCurrentBallX();
		resetCurrentBallY();
		resetBallDirectionX();
		resetBallDirectionY();
		resetCurrentPaddleX();

		// Obtain game, level, and all block assignments
		Game game = getGame();
		Level level = game.getLevel(currentLevel - 1);
		List<BlockAssignment> assignments = level.getBlockAssignments();

		// Create a new PlayedBlockAssignment for each assignment in the list of
		// assignments
		for (BlockAssignment assignment : assignments) {
			new PlayedBlockAssignment(
					Game.WALL_PADDING
							+ (Block.SIZE + Game.COLUMNS_PADDING) * (assignment.getGridHorizontalPosition() - 1),
					Game.WALL_PADDING + (Block.SIZE + Game.ROW_PADDING) * (assignment.getGridVerticalPosition() - 1),
					assignment.getBlock(), this);
		}

		// Create random locations if the number of blocks is less than the desired
		// number
		while (numberOfBlocks() < game.getNrBlocksPerLevel()) {
			// Instantiate a randomizer
			Random rand = new Random();
			// Generate a random position
			int x = Game.WALL_PADDING + (Block.SIZE + Game.COLUMNS_PADDING) * rand.nextInt(15);
			int y = Game.WALL_PADDING + (Block.SIZE + Game.ROW_PADDING) * rand.nextInt(15);
			// Check if an assignemnt already exists in the location
			boolean blockFound = false;
			for (PlayedBlockAssignment pbassignment : getBlocks()) {
				if (pbassignment.getX() == x && pbassignment.getY() == y) {
					blockFound = true;
					break;
				}
			}
			// If no block currently exists, add the random block
			if (!blockFound)
				new PlayedBlockAssignment(x, y, game.getRandomBlock(), this);
		}

	}

	private void doHitPaddleOrWall() {
		bounceBall(); // Method described later
	}

	private void doOutOfBounds() {

		// # of lives decreases
		this.setLives(lives - 1);

		// Reset ball location, directions, and paddle position
		this.resetCurrentBallX();
		this.resetCurrentBallY();
		this.resetBallDirectionX();
		this.resetBallDirectionY();
		this.resetCurrentPaddleX();
	}

	private void doHitBlock() {

		// Get score
		int score = getScore();
		bounce = getBounce();
		PlayedBlockAssignment pblock = bounce.getHitBlock();
		Block block = pblock.getBlock();

		// Get number of points for the block hit
		// Add this to the score
		int bscore = block.getPoints();
		this.setScore(score + bscore);

		// Delete the specific block assignment and bounce the ball
		pblock.delete();
		bounceBall();
	}

	private void doHitBlockNextLevel() {

		// Block is hit
		doHitBlock();
		int level = getCurrentLevel();

		// Obtain the next level
		setCurrentLevel(level + 1);

		// Set the next paddle length
		setCurrentPaddleLength(getGame().getPaddle().getMaxPaddleLength()
				- (getGame().getPaddle().getMaxPaddleLength() - getGame().getPaddle().getMinPaddleLength())
						/ (getGame().numberOfLevels() - 1) * (getCurrentLevel() - 1));

		// Add wait time
		setWaitTime(INITIAL_WAIT_TIME
				* Math.pow(getGame().getBall().getBallSpeedIncreaseFactor(), (getCurrentLevel() - 1)));
	}

	/**
	 * This method is performed when the ball is bounced after hitting the paddle,
	 * block, or wall.
	 * 
	 * @author Kelly Ma
	 */

	private void bounceBall() {

		// Obtain the bounce points
		BouncePoint bp = getBounce();

		// Get current ball coordinates
		double currentBallX = getCurrentBallX();
		double currentBallY = getCurrentBallY();

		// Get upcoming ball coordinates
		double nextBallX = bp.getX() - currentBallX;
		double nextBallY = bp.getY() - currentBallY;

		// Get remaining distance left
		double distanceLeftX = getBallDirectionX() - nextBallX;
		double distanceLeftY = getBallDirectionY() - nextBallY;

		if (distanceLeftX == 0 && distanceLeftY == 0) {
			// If there is no distance left, set the ball positions as current ones
			setCurrentBallX(bp.getX());
			setCurrentBallY(bp.getY());
		} else {
			// Create variables to store new ball positions and directions
			double newDirX, newDirY, newCurrentBallX, newCurrentBallY;
			// First, check if the direction change is in X
			if (bp.getDirection() == BounceDirection.FLIP_X) {
				newDirX = -getBallDirectionX();
				newDirY = getBallDirectionY() + getUnitValue(getBallDirectionY()) * 0.1 * Math.abs(newDirX);
				if (getBallDirectionX() != 0) {
					newCurrentBallX = bp.getX() + distanceLeftX * newDirX / getBallDirectionX();
				} else {
					newCurrentBallX = bp.getX() + distanceLeftY * newDirX / getBallDirectionY();
				}
				if (getBallDirectionY() != 0) {
					newCurrentBallY = bp.getY() + distanceLeftY * newDirY / getBallDirectionY();
				} else {
					newCurrentBallY = bp.getY() + distanceLeftX * newDirY / getBallDirectionX();
				}
			}
			// Check if the direction change is in Y
			else if (bp.getDirection() == BounceDirection.FLIP_Y) {
				newDirY = -getBallDirectionY();
				newDirX = getBallDirectionX() + getUnitValue(getBallDirectionX()) * 0.1 * Math.abs(newDirY);
				if (getBallDirectionX() != 0) {
					newCurrentBallX = bp.getX() + distanceLeftX * newDirX / getBallDirectionX();
				} else {
					newCurrentBallX = bp.getX() + distanceLeftY * newDirX / getBallDirectionY();
				}
				if (getBallDirectionY() != 0) {
					newCurrentBallY = bp.getY() + distanceLeftY * newDirY / getBallDirectionY();
				} else {
					newCurrentBallY = bp.getY() + distanceLeftX * newDirY / getBallDirectionX();
				}
			}
			// Check if the direction change is in both
			else {
				newDirX = -getBallDirectionX();
				newDirY = -getBallDirectionY();
				if (getBallDirectionX() != 0) {
					newCurrentBallX = bp.getX() + distanceLeftX * newDirX / getBallDirectionX();
				} else {
					newCurrentBallX = bp.getX() + distanceLeftY * newDirX / getBallDirectionY();
				}
				if (getBallDirectionY() != 0) {
					newCurrentBallY = bp.getY() + distanceLeftY * newDirY / getBallDirectionY();
				} else {
					newCurrentBallY = bp.getY() + distanceLeftX * newDirY / getBallDirectionX();
				}
			}
			// Set ball positions and directions
			setCurrentBallX(newCurrentBallX);
			setCurrentBallY(newCurrentBallY);
			setBallDirectionX(newDirX);
			setBallDirectionY(newDirY);
		}
		// Remove bounce point
		setBounce(null);
	}

	/**
	 * This method returns a unit vector with value of either -1 or 1
	 * 
	 * @param val The current value
	 * @return A unit vector
	 */
	private int getUnitValue(double val) {
		if (val >= 0) {
			return 1;
		}
		return -1;
	}

	/*
	 * Method calculateBouncePointPaddle sets the flip states of the ball when it
	 * hits the paddle.
	 * 
	 * @author Imane Chafi
	 * 
	 * @author Kelly Ma
	 * 
	 * @return The bounce point after hitting paddle
	 */

	private BouncePoint calculateBouncePointPaddle() {

		// Obtain current ball radius, ball location, and direction
		int radius = Ball.BALL_DIAMETER / 2;
		double currentBallX = getCurrentBallX();
		double currentBallY = getCurrentBallY();
		double dX = getBallDirectionX();
		double dY = getBallDirectionY();

		// Create a line segment to check for intersection using ball's current location
		// and next location
		Line2D segment = new Line2D.Double(currentBallX, currentBallY, currentBallX + dX, currentBallY + dY);

		// Get current paddle position, length, and width
		double currentPaddleX = getCurrentPaddleX();
		double currentPaddleY = getCurrentPaddleY();
		double paddleLength = getCurrentPaddleLength();
		int paddleWidth = Paddle.PADDLE_WIDTH;

		// Create rectangles to represent the different possible bounce locations
		Rectangle2D rectangleA = new Rectangle2D.Double(currentPaddleX, currentPaddleY - radius, paddleLength,
				paddleWidth);
		Rectangle2D rectangleB = new Rectangle2D.Double(currentPaddleX - radius, currentPaddleY, radius, paddleWidth);
		Rectangle2D rectangleC = new Rectangle2D.Double(currentPaddleX + paddleLength, currentPaddleY, radius,
				paddleWidth);
		Rectangle2D rectangleE = new Rectangle2D.Double(currentPaddleX - radius, currentPaddleY - radius, radius,
				radius);
		Rectangle2D rectangleF = new Rectangle2D.Double(currentPaddleX + paddleLength, currentPaddleY - radius, radius,
				radius);

		// Create boolean values to check for intersection
		boolean intersectionA = segment.intersects(rectangleA);
		boolean intersectionB = segment.intersects(rectangleB);
		boolean intersectionC = segment.intersects(rectangleC);
		boolean intersectionE = segment.intersects(rectangleE);
		boolean intersectionF = segment.intersects(rectangleF);

		// Declare variables to store calculation values
		double a, b, A, B, C, D, checkX, checkY, Xa, Xb, X, Y;

		/*
		 * Check for line segment's intersections with the rectangles and appropriate
		 * edges, for each intersection
		 */

		// Intersection A
		if (intersectionA) {
			if (dX == 0) { // No X direction
				return new BouncePoint(currentBallX, currentPaddleY - radius, BounceDirection.FLIP_Y);
			} else {
				a = dY / dX;
				b = currentBallY - a * currentBallX;
				checkY = currentPaddleY - radius;
				checkX = (checkY - b) / a;
				// Check that the next x and y coordinates are not equal to checkX and checkY
				if (!((currentBallX + dX) == checkX && (currentBallY + dY) == checkY))
					return new BouncePoint(checkX, checkY, BounceDirection.FLIP_Y);
			}
		}

		// Intersection B
		if (intersectionB) {
			if (dX != 0) {
				a = dY / dX;
				b = currentBallY - a * currentBallX;
				checkX = currentPaddleX - radius;
				checkY = a * checkX + b;
				// Check that the next x and y coordinates are not equal to checkX and checkY
				if (!((currentBallX + dX) == checkX && (currentBallY + dY) == checkY))
					return new BouncePoint(checkX, checkY, BounceDirection.FLIP_X);
			}
		}

		// Intersection C
		if (intersectionC) {
			if (dX != 0) {
				a = dY / dX;
				b = currentBallY - a * currentBallX;
				checkX = currentPaddleX + paddleLength + radius;
				checkY = a * checkX + b;
				// Check that the next x and y coordinates are not equal to checkX and checkY
				if (!((currentBallX + dX) == checkX && (currentBallY + dY) == checkY))
					return new BouncePoint(checkX, checkY, BounceDirection.FLIP_X);
			}
		}

		// Intersection E
		// Ensure that one of dX or dY are positive
		if (intersectionE && !(dX < 0 && dY < 0)) {
			a = 0;
			if (dX != 0)
				a = dY / dX;
			b = currentBallY - a * currentBallX;
			// Perform curve calculations here
			A = 1 + Math.pow(a, 2);
			B = 2 * a * (b - currentPaddleY) - 2 * currentPaddleX;
			C = Math.pow(currentPaddleX, 2) + Math.pow(b - currentPaddleY, 2) - Math.pow(radius, 2);
			D = Math.sqrt(Math.pow(B, 2) - 4 * A * C);
			Xa = (-B - D) / (2 * A);
			Xb = (-B + D) / (2 * A);
			// Assign X and Y values for checking
			X = Xb;
			if (Math.abs(currentBallX - Xa) < Math.abs(currentBallX - Xb))
				X = Xa;
			Y = a * X + b;
			// Check that the next x and y coordinates are not equal to X and Y
			// Check that X and Y are not asymptotic
			if (!(((currentBallX + dX) == X && (currentBallY + dY) == Y)) && !(Double.isNaN(X) || Double.isNaN(Y))) {
				if (dX < 0) {
					// Flip Y if ball is move left
					return new BouncePoint(X, Y, BounceDirection.FLIP_Y);
				} else {
					return new BouncePoint(X, Y, BounceDirection.FLIP_X);
				}
			}
		}

		// Intersection E
		// Ensure that dX is negative or dY is positive
		if (intersectionF && !(dX > 0 && dY < 0)) {
			a = 0;
			if (dX != 0)
				a = dY / dX;
			b = currentBallY - a * currentBallX;
			// Perform curve calculations here
			A = 1 + Math.pow(a, 2);
			B = 2 * a * (b - currentPaddleY) - 2 * (currentPaddleX + paddleLength);
			C = Math.pow((currentPaddleX + paddleLength), 2) + Math.pow(b - currentPaddleY, 2) - Math.pow(radius, 2);
			D = Math.sqrt(Math.pow(B, 2) - 4 * A * C);
			Xa = (-B - D) / (2 * A);
			Xb = (-B + D) / (2 * A);
			// Assign X and Y values for checking
			X = Xb;
			if (Math.abs(currentBallX - Xa) < Math.abs(currentBallX - Xb))
				X = Xa;
			Y = a * X + b;
			// Check that the next x and y coordinates are not equal to X and Y
			// Check that X and Y are not asymptotic
			if (!(((currentBallX + dX) == X && (currentBallY + dY) == Y)) && !(Double.isNaN(X) || Double.isNaN(Y))) {
				if (dX < 0) {
					return new BouncePoint(X, Y, BounceDirection.FLIP_X);
				} else {
					return new BouncePoint(X, Y, BounceDirection.FLIP_Y);
				}
			}
		}
		// If no intersections are found, return null
		return null;
	}

	/**
	 * This method calculates the bounce point when the ball hits the wall
	 * 
	 * @author Kelly Ma
	 * @return the bounce point of the wall or null
	 */

	private BouncePoint calculateBouncePointWall() {

		// Get ball radius
		double radius = (double) Ball.BALL_DIAMETER / 2;

		// Obtain current ball coordinates and directions
		double currentBallX = getCurrentBallX();
		double currentBallY = getCurrentBallY();
		double dX = getBallDirectionX();
		double dY = getBallDirectionY();

		// Declare variables to store calculation values
		double a = dY / dX;
		double b = currentBallY - a * currentBallX;
		double checkX, checkY;

		// Check intersection with upper wall, side B
		if (currentBallY + dY <= radius) {
			// Check if top-left corner is hit
			if (currentBallX + dX <= radius)
				return new BouncePoint(radius, radius, BounceDirection.FLIP_BOTH);
			// Check if top-right corner is hit
			if (currentBallX + dX >= Game.PLAY_AREA_SIDE - radius)
				return new BouncePoint(Game.PLAY_AREA_SIDE - radius, radius, BounceDirection.FLIP_BOTH);
			// At this point, the ball will not hit the corners
			// Check that the ball's X direction is not 0
			if (dX != 0) {
				checkY = radius;
				checkX = (checkY - b) / a;
				return new BouncePoint(checkX, checkY, BounceDirection.FLIP_Y);
			} else {
				// The ball has no X direction
				return new BouncePoint(currentBallX, radius, BounceDirection.FLIP_Y);
			}
		}

		// Check intersection with side A
		if (currentBallX + dX <= radius) {
			if (dX != 0) {
				checkX = radius;
				checkY = a * checkX + b;
				return new BouncePoint(checkX, checkY, BounceDirection.FLIP_X);
			}
		}

		// Check intersection with side C
		if (currentBallX + dX >= Game.PLAY_AREA_SIDE - radius) {
			if (dX != 0) {
				checkX = Game.PLAY_AREA_SIDE - radius;
				checkY = a * checkX + b;
				return new BouncePoint(checkX, checkY, BounceDirection.FLIP_X);
			}
		}

		// Return null if no bouncepoints are found
		return null;
	}

	/**
	 * This method returns the bounce point that is the closest to the ball. If
	 * there is no bouncePoint, it returns null.
	 * 
	 * @author Mathieu Bissonnette
	 * @author Kelly Ma
	 * @return the bounce point after hitting a block
	 */
	private BouncePoint calculateBouncePointBlock(PlayedBlockAssignment block) {

		// Get current ball radius
		int radius = Ball.BALL_DIAMETER / 2;

		// Get current ball location and direction
		double currentBallX = getCurrentBallX();
		double currentBallY = getCurrentBallY();
		double dX = getBallDirectionX();
		double dY = getBallDirectionY();

		// Store segment to be used for intersections
		Line2D segment = new Line2D.Double(currentBallX, currentBallY, currentBallX + dX, currentBallY + dY);

		// Get current block length (same as width)
		int blockSide = Block.SIZE;

		// Get current block positions
		int currentBlockX = block.getX();
		int currentBlockY = block.getY();

		// Create rectangles for intersection calculations
		Rectangle2D rectangleA = new Rectangle2D.Double(currentBlockX, currentBlockY - radius, blockSide, radius);
		Rectangle2D rectangleB = new Rectangle2D.Double(currentBlockX - radius, currentBlockY, radius, blockSide);
		Rectangle2D rectangleC = new Rectangle2D.Double(currentBlockX + blockSide, currentBlockY, radius, blockSide);
		Rectangle2D rectangleD = new Rectangle2D.Double(currentBlockX, currentBlockY + blockSide, blockSide, radius);
		Rectangle2D rectangleE = new Rectangle2D.Double(currentBlockX - radius, currentBlockY - radius, radius, radius);
		Rectangle2D rectangleF = new Rectangle2D.Double(currentBlockX + blockSide, currentBlockY - radius, radius,
				radius);
		Rectangle2D rectangleG = new Rectangle2D.Double(currentBlockX - radius, currentBlockY + blockSide, radius,
				radius);
		Rectangle2D rectangleH = new Rectangle2D.Double(currentBlockX + blockSide, currentBlockY + blockSide, radius,
				radius);

		// Create boolean values to check for intersection
		boolean intersectionA = segment.intersects(rectangleA);
		boolean intersectionB = segment.intersects(rectangleB);
		boolean intersectionC = segment.intersects(rectangleC);
		boolean intersectionD = segment.intersects(rectangleD);
		boolean intersectionE = segment.intersects(rectangleE);
		boolean intersectionF = segment.intersects(rectangleF);
		boolean intersectionG = segment.intersects(rectangleG);
		boolean intersectionH = segment.intersects(rectangleH);

		// Declare variables to store calculation values
		double a, b, A, B, C, D, checkX, checkY, Xa, Xb, X, Y;

		// Intersection A
		if (intersectionA) {
			if (dX == 0) { // No X direction
				BouncePoint bp = new BouncePoint(currentBallX, currentBlockY - radius, BounceDirection.FLIP_Y);
				bp.setHitBlock(block);
				return bp;
			}
			a = dY / dX;
			b = currentBallY - a * currentBallX;
			checkY = currentBlockY - radius;
			checkX = (checkY - b) / a;
			// Check that the next x and y coordinates are not equal to checkX and checkY
			if (!((currentBallX + dX) == checkX && (currentBallY + dY) == checkY)) {
				BouncePoint bp = new BouncePoint(checkX, checkY, BounceDirection.FLIP_Y);
				bp.setHitBlock(block);
				return bp;
			}
		}

		// Intersection B
		if (intersectionB) {
			if (dX != 0) { // Has X direction
				a = dY / dX;
				b = currentBallY - a * currentBallX;
				checkX = currentBlockX - radius;
				checkY = a * checkX + b;
				// Check that the next x and y coordinates are not equal to checkX and checkY
				if (!((currentBallX + dX) == checkX && (currentBallY + dY) == checkY)) {
					BouncePoint bp = new BouncePoint(checkX, checkY, BounceDirection.FLIP_X);
					bp.setHitBlock(block);
					return bp;
				}
			}
		}

		// IntersectionC
		if (intersectionC) {
			if (dX != 0) { // Has X direction
				a = dY / dX;
				b = currentBallY - a * currentBallX;
				checkX = currentBlockX + radius + blockSide;
				checkY = a * checkX + b;
				// Check that the next x and y coordinates are not equal to checkX and checkY
				if (!((currentBallX + dX) == checkX && (currentBallY + dY) == checkY)) {
					BouncePoint bp = new BouncePoint(checkX, checkY, BounceDirection.FLIP_X);
					bp.setHitBlock(block);
					return bp;
				}
			}
		}

		// Intersection D
		if (intersectionD) {
			if (dX != 0) { // Has X direction
				a = dY / dX;
				b = currentBallY - a * currentBallX;
				checkY = currentBlockY + blockSide + radius;
				checkX = (checkY - b) / a;
				// Check that the next x and y coordinates are not equal to checkX and checkY
				if (!((currentBallX + dX) == checkX && (currentBallY + dY) == checkY)) {
					BouncePoint bp = new BouncePoint(checkX, checkY, BounceDirection.FLIP_Y);
					bp.setHitBlock(block);
					return bp;
				}
			}
			if (dX == 0) {
				BouncePoint bp = new BouncePoint(currentBallX, currentBlockY + blockSide + radius,
						BounceDirection.FLIP_Y);
				bp.setHitBlock(block);
				return bp;
			}
		}

		// Intersection E
		// Check that one of dX or dY is positive
		if (intersectionE && !(dX < 0 && dY < 0)) {
			a = 0;
			if (dX != 0) // Has X direction
				a = dY / dX;
			b = currentBallY - a * currentBallX;
			// Perform curve calculations here
			A = 1 + Math.pow(a, 2);
			B = 2 * a * (b - currentBlockY) - 2 * currentBlockX;
			C = Math.pow(currentBlockX, 2) + Math.pow(b - currentBlockY, 2) - Math.pow(radius, 2);
			D = Math.sqrt(Math.pow(B, 2) - 4 * A * C);
			Xa = (-B - D) / (2 * A);
			Xb = (-B + D) / (2 * A);
			// Assign X and Y values for checking
			X = Xb;
			if (Math.abs(currentBallX - Xa) < Math.abs(currentBallX - Xb))
				X = Xa;
			Y = a * X + b;
			// Check that the next x and y coordinates are not equal to X and Y
			// Check that X and Y are not asymptotic
			if (!(((currentBallX + dX) == X && (currentBallY + dY) == Y)) && !(Double.isNaN(X) || Double.isNaN(Y))) {
				if (dX < 0) { // Ball is moving towards the left
					BouncePoint bp = new BouncePoint(X, Y, BounceDirection.FLIP_Y);
					bp.setHitBlock(block);
					return bp;
				} else { // Ball is moving towards the right
					BouncePoint bp = new BouncePoint(X, Y, BounceDirection.FLIP_X);
					bp.setHitBlock(block);
					return bp;
				}
			}
		}

		// Intersection F
		// Ensure that dX is negative or dY is positive
		if (intersectionF && !(dX > 0 && dY < 0)) {
			a = 0;
			if (dX != 0) // Has X direction
				a = dY / dX;
			b = currentBallY - a * currentBallX;
			// Perform curve calculations here
			A = 1 + Math.pow(a, 2);
			B = 2 * a * (b - currentBlockY) - 2 * (currentBlockX + blockSide);
			C = Math.pow((currentBlockX + blockSide), 2) + Math.pow(b - currentBlockY, 2) - Math.pow(radius, 2);
			D = Math.sqrt(Math.pow(B, 2) - 4 * A * C);
			Xa = (-B - D) / (2 * A);
			Xb = (-B + D) / (2 * A);
			// Assign X and Y values for checking
			X = Xb;
			if (Math.abs(currentBallX - Xa) < Math.abs(currentBallX - Xb))
				X = Xa;
			Y = a * X + b;
			// Check that the next x and y coordinates are not equal to X and Y
			// Check that X and Y are not asymptotic
			if (!(((currentBallX + dX) == X && (currentBallY + dY) == Y)) && !(Double.isNaN(X) || Double.isNaN(Y))) {
				if (dX < 0) { // Ball is moving towards the left
					BouncePoint bp = new BouncePoint(X, Y, BounceDirection.FLIP_X);
					bp.setHitBlock(block);
					return bp;
				} else { // Ball is moving towards the right
					BouncePoint bp = new BouncePoint(X, Y, BounceDirection.FLIP_Y);
					bp.setHitBlock(block);
					return bp;
				}
			}
		}

		// Intersection G
		if (intersectionG && !(dX < 0 && dY > 0)) {
			a = 0;
			if (dX != 0) // Has X direction
				a = dY / dX;
			b = currentBallY - a * currentBallX;
			// Perform curve calculations here
			A = 1 + Math.pow(a, 2);
			B = 2 * a * (b - currentBlockY - blockSide) - 2 * currentBlockX;
			C = Math.pow(currentBlockX, 2) + Math.pow(b - currentBlockY - blockSide, 2) - Math.pow(radius, 2);
			D = Math.sqrt(Math.pow(B, 2) - 4 * A * C);
			Xa = (-B - D) / (2 * A);
			Xb = (-B + D) / (2 * A);
			// Assign X and Y values for checking
			X = Xb;
			if (Math.abs(currentBallX - Xa) < Math.abs(currentBallX - Xb))
				X = Xa;
			Y = a * X + b;
			// Check that the next x and y coordinates are not equal to X and Y
			// Check that X and Y are not asymptotic
			if (!(((currentBallX + dX) == X && (currentBallY + dY) == Y)) && !(Double.isNaN(X) || Double.isNaN(Y))) {
				if (dX < 0) { // Ball is moving towards the left
					BouncePoint bp = new BouncePoint(X, Y, BounceDirection.FLIP_Y);
					bp.setHitBlock(block);
					return bp;
				} else { // Ball is moving towards the right
					BouncePoint bp = new BouncePoint(X, Y, BounceDirection.FLIP_X);
					bp.setHitBlock(block);
					return bp;
				}
			}

		}

		// Intersection H
		// Check that dX is negative or dY is negative
		if (intersectionH && !(dX > 0 && dY > 0)) {
			a = 0;
			if (dX != 0) // Has X direction
				a = dY / dX;
			b = currentBallY - a * currentBallX;
			// Perform curve calculations here
			A = 1 + Math.pow(a, 2);
			B = 2 * a * (b - currentBlockY - blockSide) - 2 * (currentBlockX + blockSide);
			C = Math.pow((currentBlockX + blockSide), 2) + Math.pow(b - currentBlockY - blockSide, 2)
					- Math.pow(radius, 2);
			D = Math.sqrt(Math.pow(B, 2) - 4 * A * C);
			Xa = (-B - D) / (2 * A);
			Xb = (-B + D) / (2 * A);
			// Assign X and Y values for checking
			X = Xb;
			if (Math.abs(currentBallX - Xa) < Math.abs(currentBallX - Xb))
				X = Xa;
			Y = a * X + b;
			// Check that the next x and y coordinates are not equal to X and Y
			// Check that X and Y are not asymptotic
			if (!(((currentBallX + dX) == X && (currentBallY + dY) == Y)) && !(Double.isNaN(X) || Double.isNaN(Y))) {
				if (dX < 0) { // Ball is moving towards the left
					BouncePoint bp = new BouncePoint(X, Y, BounceDirection.FLIP_X);
					bp.setHitBlock(block);
					return bp;
				} else { // Ball is moving towards the right
					BouncePoint bp = new BouncePoint(X, Y, BounceDirection.FLIP_Y);
					bp.setHitBlock(block);
					return bp;
				}
			}
		}
		// No bouncepoints found
		return null;

	}
	
	/**
	 * This method returns true if pointA exists and is closer to the ball than
	 * pointB.
	 * 
	 * @author Mathieu Bissonnette
	 */
	private boolean isCloser(BouncePoint A, BouncePoint B) {

		// Obtain current ball position
		double currentBallX = getCurrentBallX();
		double currentBallY = getCurrentBallY();

		// Before performing any calculations, check if A and B exist
		if (A == null)
			return false;
		if (B == null)
			return true;

		// Calculate distance to A and B
		// Verify which one is closest
		double distanceA = Math.sqrt(Math.pow((A.getX() - currentBallX), 2) + Math.pow(A.getY() - currentBallY, 2));
		double distanceB = Math.sqrt(Math.pow((B.getX() - currentBallX), 2) + Math.pow(B.getY() - currentBallY, 2));

		// Return true is distanceA is bigger
		// In all other cases, return false
		if (distanceB > distanceA)
			return true;
		return false;
	}

	/*
	 * Method if the ball doesn't hit anything and stays in bounds
	 * 
	 * @author Imane Chafi
	 */

	private void doHitNothingAndNotOutOfBounds() {
		double x = this.getCurrentBallX();
		double y = this.getCurrentBallY();
		double dx = this.getBallDirectionX();
		double dy = this.getBallDirectionY();
		this.setCurrentBallX(x + dx);
		this.setCurrentBallY(y + dy);
	}

	/**
	 * This performs all the required actions for ending the game.
	 * 
	 * @author Georges Mourant
	 */
	private void doGameOver() {
		Block223 block223 = this.getBlock223();
		Player p = this.getPlayer();

		if (p != null) {
			Game game = this.getGame();
			HallOfFameEntry hof = new HallOfFameEntry(this.score, this.getPlayername(), p, game, block223);
			game.setMostRecentEntry(hof);
		}
		this.delete();
	}

	// Guard Helper methods

	/**
	 * This returns true if the ball is out of bounds.
	 * 
	 * @author Georges Mourant
	 * @return if ball is out of bounds
	 */
	private boolean isBallOutOfBounds() {
		boolean outofbounds = false;
		if (this.getCurrentBallY() + this.getBallDirectionY() > Game.PLAY_AREA_SIDE - 2 * Game.GRID_DIMENSIONS) {
			outofbounds = true;
		}
		return outofbounds;
	}

}