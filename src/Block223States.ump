class PlayedGame {

  // State Machine
  
  playStatus {
    Ready {
      entry / { doSetup(); }
      play -> Moving;
    }
    Moving {
      pause -> Paused;
      move [hitPaddle()] / { doHitPaddleOrWall(); } -> Moving;
      move [isOutOfBoundsAndLastLife()] / { doOutOfBounds(); } -> GameOver;
      move [isOutOfBounds()] / { doOutOfBounds(); } -> Paused;
      move [hitLastBlockAndLastLevel()] / { doHitBlock(); } -> GameOver;
      move [hitLastBlock()] / { doHitBlockNextLevel(); } -> Ready;
      move [hitBlock()] / { doHitBlock(); } -> Moving;
      move [hitWall()] / { doHitPaddleOrWall(); } -> Moving;
      move / { doHitNothingAndNotOutOfBounds(); } -> Moving;
    }
    Paused {
      play -> Moving;
    }
    GameOver {
      entry / { doGameOver(); }
    }
  }
  
  // Guards
  
  private boolean hitPaddle() {
    // TODO implement
    return false;
  }

  /**
   * This returns true if the ball is out of bounds and is last life.
   * @author Georges Mourant
   * @return if ball is out of bounds and last life
  */
  private boolean isOutOfBoundsAndLastLife() {
    boolean outOfBounds = false;
    if(lives == 1) outOfBounds = isBallOutOfBounds();
    return outOfBounds;
  }
  
  /**
   * This returns true if the ball is out of bounds.
   * @author Georges Mourant
   * @return if ball is out of bounds and last life
  */
  private boolean isOutOfBounds() {
    return isBallOutOfBounds();
  }
  
  private boolean hitLastBlockAndLastLevel() {
    Game game = getGame();
    int nrLevels = game.numberOfLevels();
    setBounce(null);
    if (nrLevels == currentLevel) {
        int nrBlocks = numberOfBlocks();
        if (nrBlocks == 1) {
            PlayedBlockAssignment block = getBlock(0);
            BouncePoint bp = calculateBouncePointBlock(block);
            setBounce(bp);
            return true;
        }
    }
    return false;
  }
  
  /**
  * This method returns true if the ball hits the last block.
  * @author Mathieu Bissonnette
  */
  
  private boolean hitLastBlock(){
    int nrBlocks = numberOfBlocks();
    setBounce(null);
    if (nrBlocks == 1) {
        PlayedBlockAssignment block = getBlock(0);
        BouncePoint bp = calculateBouncePointBlock(block);
        setBounce(bp);
        return true;
    }
    return false;
  }
  
  /**
  * This method returns true if the ball hits a block.
  * @author Mathieu Bissonnette
  */
  
  private boolean hitBlock() {
    int nrBlocks = numberOfBlocks();
    setBounce(null);
    for (int i = 0; i <= (nrBlocks - 1); i++) {
        PlayedBlockAssignment block = getBlock(i);
        BouncePoint bp = calculateBouncePointBlock(block);
        bounce = getBounce();
        boolean closer = isCloser(bp, bounce);
        if (closer)
            setBounce(bp);
    }
    return (getBounce() != null);
  }
  
  private boolean hitWall() {
    // TODO implement
    return false;
  }
  
  // Actions
  
  /**
 	 * Public method used to get a random number
 	 * @author https://dzone.com/articles/random-number-generation-in-java
 	 * @return double value
 	 * */
 	public static int getRandomInt(){
 	    Random rand = new Random();
 		//obtain number between 0-49
 	    int x = rand.nextInt(50);
 	    return x;
 	}
	
	/**
 	 * This private method returns the setup for the Played Game
 	 * by resetting the ball positions and paddle positions and by
 	 * adding random block positions if there is less blocks than the 
 	 * set number of blocks/level.
 	 * @author Imane Chafi 
 	 * */
 	private void doSetup() {
	
 		this.resetCurrentBallX();
 		this.resetCurrentBallY();
 		this.resetBallDirectionX();
 		this.resetBallDirectionY();
 		this.resetCurrentPaddleX();
 		this.getGame();
 		Level level = game.getLevel(getCurrentLevel()-1);
 		List <BlockAssignment> assignment = level.getBlockAssignments();
 		
 	
 		for(BlockAssignment a : assignment) {
 			PlayedBlockAssignment pblock = new PlayedBlockAssignment(Game.WALL_PADDING + (Block.SIZE + Game.COLUMNS_PADDING)*(a.getGridHorizontalPosition()-1), Game.WALL_PADDING + (Block.SIZE + Game.ROW_PADDING)*(a.getGridVerticalPosition() - 1), a.getBlock(), this);
 			
 		}
 		//Initializing the x and y variables before the while loop
 			int x;
 			int y;
 		while(numberOfBlocks() < game.getNrBlocksPerLevel()) {
 			
 			//Pick a random location for x and y 
 			x = getRandomInt();
 			y = getRandomInt();
 			
 			//Pick random grid location.
 			BlockAssignment randomgridPositionX = game.getBlockAssignment(x);
 			BlockAssignment randomgridPositionY = game.getBlockAssignment(y);

 			//if chosen, try next position starting from randomly chosen position
 			if((randomgridPositionX != null )&& (randomgridPositionY != null)){
 				x++;
 			 	if((x == 7) && (randomgridPositionX != null )&& (randomgridPositionY != null))
 			 	y++;
 			 }
 			//going to the right, then next row until last row
 			//then 1/1 until empty position found.
 			//convert to x/y coordinates
 			x = Game.WALL_PADDING + (Block.SIZE + Game.COLUMNS_PADDING)*(randomgridPositionX.getGridHorizontalPosition()-1);
 			y = Game.WALL_PADDING + (Block.SIZE + Game.ROW_PADDING)*(randomgridPositionY.getGridVerticalPosition() - 1);
 			
 			
 			PlayedBlockAssignment pblock = new PlayedBlockAssignment(x,y,game.getRandomBlock(), this);
 			
 		}
 		
 		
 	}
  
  private void doHitPaddleOrWall() {
    // TODO implement
  }

  private void doOutOfBounds() {
    setLives(lives-1);
    resetCurrentBallX();
    resetCurrentBallY();
    resetBallDirectionX();
    resetBallDirectionY();
    resetCurrentPaddleX();
  }

  private void doHitBlock() {
    int score = getScore();
    BouncePoint bounce = getBounce();
    PlayedBlockAssignment pblock = bounce.getHitBlock();
    Block block = pblock.getBlock();
    int bscore = block.getPoints();
    setScore(score + bscore);
    pblock.delete();
    bounceBall();
  }

  private void doHitBlockNextLevel() {
    doHitBlock();
    int level = getCurrentLevel();
    setCurrentLevel(level + 1);
    Paddle paddle = getGame().getPaddle();
    int length = paddle.getMaxPaddleLength() 
            - (paddle.getMaxPaddleLength() - paddle.getMinPaddleLength())
            / (getGame().numberOfLevels() - 1) 
            * (getCurrentLevel() - 1);
    setCurrentPaddleLength(length);
    setWaitTime(INITIAL_WAIT_TIME 
            * Math.pow(getGame().getBall().getBallSpeedIncreaseFactor(),
            (getCurrentLevel() - 1)));
  }
  
   private BouncePoint calculateBouncePointBlock(PlayedBlockAssignment block){
       // Construct the collision box.
       int gridHorizontalCoordinate = block.getX();
       int gridVerticalCoordinate = block.getY();
       int boxTopLeftX = 10+15*(gridHorizontalCoordinate-1);
       int boxTopLeftY = 10+12*(gridVerticalCoordinate-1);
       // verify if the ball hits the collision box.
       Rectangle2D collisionBox = new Rectangle(boxTopLeftX,boxTopLeftY,30,30);
       Line2D ballDirection = new Line2D.Double(currentBallX, currentBallY, currentBallX+ballDirectionX, currentBallX+ballDirectionY);
       if (collisionBox.intersectsLine(ballDirection)) {
           // find border bounce points.
           Stack<BouncePoint> bouncePoints = new Stack<BouncePoint>();
           Point point = lineIntersect(ballDirection,new Line2D.Double(boxTopLeftX+5, boxTopLeftY, boxTopLeftX+25, boxTopLeftY));
           if (point != null) {
               BouncePoint bpA = new BouncePoint(point.getX(), point.getY(), BounceDirection.FLIP_Y);
               bouncePoints.push(bpA);
           }
           point = lineIntersect(ballDirection,new Line2D.Double(boxTopLeftX, boxTopLeftY+5, boxTopLeftX, boxTopLeftY+25));
           if (point != null) {
               BouncePoint bpB = new BouncePoint(point.getX(), point.getY(), BounceDirection.FLIP_X);
               bouncePoints.push(bpB);
           }
           point = lineIntersect(ballDirection,new Line2D.Double(boxTopLeftX+30, boxTopLeftY+5, boxTopLeftX+30, boxTopLeftY+25));
           if (point != null) {
               BouncePoint bpC = new BouncePoint(point.getX(), point.getY(), BounceDirection.FLIP_X);
               bouncePoints.push(bpC);
           }
           point = lineIntersect(ballDirection,new Line2D.Double(boxTopLeftX+5, boxTopLeftY+30, boxTopLeftX+25, boxTopLeftY+30));
           if (point != null) {
               BouncePoint bpD = new BouncePoint(point.getX(), point.getY(), BounceDirection.FLIP_Y);
               bouncePoints.push(bpAD;
           }
           
           //Then add corner points
           
           //Then pop and swap if closer
           
           //Then return the closer bounce point.
           
       }
       return null;
  }
  
  /**
  * This method returns true if pointA exists and is closer to the ball than pointB.
  * @author Mathieu Bissonnette
  */
  
  private boolean isCloser(BouncePoint pointA, BouncePoint pointB) {
       // Verify if one of the point is null.
       if (pointA == null) {
           return false;
       }
       if (pointB == null) {
           return true;
       }   
       // Calculate the distances and check for the smallest one.
       double distanceA = Math.sqrt(Math.pow(currentBallX-pointA.getX(), 2) + Math.pow(currentBallY-pointA.getY(), 2));
       double distanceB = Math.sqrt(Math.pow(currentBallX-pointB.getX(), 2) + Math.pow(currentBallY-pointB.getY(), 2));
       return (distanceA < distanceB);
  }

  private void doHitNothingAndNotOutOfBounds() {
    double x = getCurrentBallX();
    double y = getCurrentBallY();
    double dx = getBallDirectionX();
    double dy = getBallDirectionY();
    setCurrentBallX(x+dx);
    setCurrentBallY(y+dy);
  }

  /**
   * This performs all the required actions for ending the game.
   * @author Georges Mourant
  */
  private void doGameOver() {
    block223 = getBlock223();
    Player p = getPlayer();
    if(p != null){
      game = getGame();
      HallOfFameEntry hofe = new HallOfFameEntry(score, playername, p, game, block223);
      game.setMostRecentEntry(hofe);
    }
    delete();
  }

  // Guard Helper methods

  /**
   * This returns true if the ball is out of bounds.
   * @author Georges Mourant
   * @return if ball is out of bounds
  */
  private boolean isBallOutOfBounds(){
    double ballBottomY = getCurrentBallY() + Ball.BALL_DIAMETER;
    double paddleTopY = getCurrentPaddleY();
    return (paddleTopY > ballBottomY);
  }
  
 private static Point lineIntersect(Line2D lineA, Line2D lineB) {
   
   double x4 = lineB.getX2();
   double x3 = lineB.getX1();
   double x2 = lineA.getX2();
   double x1 = lineA.getX1();
   double y4 = lineB.getY2();
   double y3 = lineB.getY1();
   double y2 = lineA.getY2();
   double y1 = lineA.getY1();
   
   double denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
   if (denom == 0.0) { // Lines are parallel.
      return null;
   }
   double ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3))/denom;
   double ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3))/denom;
     if (ua >= 0.0f && ua <= 1.0f && ub >= 0.0f && ub <= 1.0f) {
         // Get the intersection point.
         return new Point((int) (x1 + ua*(x2 - x1)), (int) (y1 + ua*(y2 - y1)));
     }

   return null;
   }
}
