class GameSession {
	gameStatus {
		Idle {
			entry / {
				initializeBlocks(); // Add blocks that admin has created
				initializeBall(); // Add a SpecificBall
				initializePaddle(); // Add a SpecificPaddle & position it
			}
			startGame() [isGameAdmin() && ofTestMode() && hasEnoughBlocks()] / {
			} -> Play;
			startGame() [!ofTestMode() && hasEnoughBlocks()] / {
			} -> Play;
			startGame() [isGameAdmin() && ofTestMode() && !hasEnoughBlocks()] / {
				addRandomBlocks(); // Must reach required number of blocks
			} -> Play;
			startGame() [!ofTestMode() && !hasEnoughBlocks()] / {
				addRandomBlocks();
			} -> Play;
		}
		Play {
			entry / {
				move(specificBall);
			}
			move(specificBall) [isBlockHit() && !isLastBlock()] / { // move() updates SpecificBall position
				doBlockHit(specificBall);
				deleteBlock(); 
				increaseScore();
			} -> Play;
			move(specificBall) [isBlockHit() && isLastBlock() && !isLastLevel()] / {
				doBlockHit(specificBall);
				deleteBlock();
				resetPaddlePosition(specificPaddle);
				resetBallPosition(specificBall);
				increaseScore();
				currentLevelNr++;
			} -> Paused;
			move(specificBall) [isBlockHit() && isLastBlock() && isLastLevel()] / {
				doBlockHit(specificBall);
				deleteBlock();
				increaseScore();
			} -> Complete;
			move(specificBall) [isWallHit()] / {
				doWallHit(specificBall);
			} -> Play;
			move(specificBall) [isPaddleHit()] / {
				doPaddleHit(specificBall);
			} -> Play;
			move(specificBall) [isOutOfBounds() && !isLastLife()] / {
				doOutOfBounds(specificBall);
				resetPaddlePosition(specificPaddle);
				resetBallPosition(specificBall);
				currentLife--;
			} -> Paused;
			move(specificBall) [isOutOfBounds() && isLastLife()] / {
				doOutOfBounds(specificBall);
				currentLife--;
			} -> Complete;
			pauseGame() [!isOutOfBounds()] / {
				stopBall(specificBall); // Stop SpecificBall in its current location
				stopPaddle(specificPaddle); // Stop SpecificPaddle in its current location
			} -> Paused;
			exit / {
				stopBall(specificBall);
			}
		}
		Paused { // Make sure to call save to persistence when exiting game loop
			resumeGame() [hasNoBlocks()] / { // Represents completing a level
				initializeBlocks(); // initializeBlocks() checks if there are blocks left (if no, start from scratch)
				addRandomBlocks();
				initializeBall(); 
				initializePaddle();
			} -> Play;
			resumeGame() [!hasNoBlocks()] / { // Level not yet complete
				initializeBlocks(); // Add blocks that admin has created from save, those not deleted
				initializeBall(); // Add a SpecificBall from save
				initializePaddle(); // Add a SpecificPaddle & position it from save
			} -> Play;
		}
		Complete {
			updateHallOfFame() [isLastLevel()] {
				addHallOfFameEntry();
			} -> Final;
			gameOver() [!isLastLevel()] {
				displayGameOver();
			} -> Final;
		}
	}
	
        // Action methods
        private void initializeBlocks();
        private void initializeBall();
        private void initializePaddle();
        private void addRandomBlocks();
        private void doBlockHit(SpecificBall specificBall);
        private void deleteBlock();
        private void increaseScore();
        private void resetPaddlePosition(SpecificPaddle specificPaddle);
        private void resetBallPosition(SpecificBall specificBall);
        private void doWallHit(SpecificBall specificBall);
        private void doPaddleHit(SpecificBall specificBall);
        private void doOutOfBounds(SpecificBall specificBall);
        private void stopBall(SpecificBall specificBall);
        private void stopPaddle(SpecificPaddle specificPaddle);
        private void addHallOfFameEntry();
        private void displayGameOver();
        private void isOutOfBounds(SpecificBall specificBall); // checks if balls is out of bounds
        
        
	// Helper methods
	private boolean isGameAdmin(); // Checks if the person testing the game created it
	private boolean ofTestMode(); // Checks if GameSession is of test mode
	private boolean hasEnoughBlocks(); // Checks that # blocks is at maximum
	private boolean hasNoBlocks();
	private boolean isBlockHit();
	private boolean isWallHit();
	private boolean isPaddleHit();
	private boolean isOutOfBounds(); // returns value in specificBall
	private boolean isLastBlock();
	private boolean isLastLife();
	private boolean hasLifeLeft();
	private boolean isLastLevel();
}
