class GameSession {
	gameStatus {
		Idle {
			entry / {
				initializeBlocks();
				initializeBall();
				initializePaddle();
			}
			startGame() [ofTestMode() && hasEnoughBlocks()] / {
			} -> Play;
			startGame() [!ofTestMode() && hasEnoughBlocks()] / {
				displayScore(HallOfFameEntry aHallOfFameEntry); 
			} -> Play;
			startGame() [ofTestMode() && !hasEnoughBlocks()] / {
				addRandomBlocks();
			} -> Play;
			startGame() [!ofTestMode() && !hasEnoughBlocks()] / {
				addRandomBlocks();
				displayScore(HallOfFameEntry aHallOfFameEntry);
			} -> Play;
		}
		Play {
			entry / {
				startBall(Ball aBall);
			}
			move() [isBlockHit() && !isLastBlock()] / {
				deleteBlock(SpecificBlock aBlock);
				increaseScore();
			} -> Play;
			move() [isBlockHit() && isLastBlock() && !almostCompleteGame()] / {
				deleteBlock(SpecificBlock aBlock);
				increaseScore();
				increaseLevel();
			} -> Idle;
			move() [isBlockHit() && isLastBlock() && almostCompleteGame()] / {
				deleteBlock(SpecificBlock aBlock);
				increaseScore();
			} -> Complete;
			move() [isWallHit()] / {
				doWallHit();
			} -> Play;
			move() [isPaddleHit()] / {
				doPaddleHit();
			} -> Play;
			move() [isOutOfBounds() && !isLastLife()] / {
				doOutOfBounds();
				decreaseCurrentLife();
			} -> Idle;
			move() [isOutOfBounds() && isLastLife()] / {
				doOutOfBounds();
				decreaseCurrentLife();
			} -> Complete;
			pauseGame() [!isOutOfBounds()] / {
				saveGame();
			} -> Paused;
		}
		Paused {
			
		}
		Complete {
		
		}
	}
	
	// Helper methods
	private boolean ofTestMode();
	private boolean hasEnoughBlocks();
	private boolean isBlockHit();
	private boolean isWallHit();
	private boolean isPaddleHit();
	private boolean isOutOfBounds();
	private boolean isLastBlock();
	private boolean isLastLife();
	private boolean almostCompleteGame();
}