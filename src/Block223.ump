external interface Map {}

namespace ca.mcgill.ecse223.block.model;

use Block223Persistence.ump;
use Block223PlayMode.ump;
use Block223States.ump;

class Block223 {
   1 <@>- * User users;
   1 <@>- * UserRole roles;
   1 <@>- * Game games;
   public PlayedGame findPlayableGame(int id) {
		for (PlayedGame playedGame : playedGames) {
			if (playedGame.getId() == id) return playedGame;
		}
   return null;
   }
}

class User {
   depend java.util.Map.Entry;
   unique username;
   1 -> 1..2 UserRole roles;
   before constructor, setUsername{
   		if(aUsername.isEmpty() || aUsername.equals("") || aUsername == null){
   			throw new RuntimeException("The name of a game must be specified.");
   		}	
   }
   public static String findUsername(UserRole player) {
		Iterator<Entry<String, User>> it = usersByUsername.entrySet().iterator(); // Set an iterator to the hash map
		while (it.hasNext()) {
			User nextUser = (User)it.next(); // Obtain the next user in the hash map
			List<UserRole> userRoles = nextUser.getRoles(); // Obtain the user's list of roles
			if (userRoles.contains(player)) { // Check if the inserted player is the same role as one in the list of userRoles
				return nextUser.getUsername(); // Return username if a match is found
			}
		}
		return null;
	}
}

class UserRole {
   abstract;
   password;
   
   before constructor {
   		if(aPassword == null || aPassword.equals("")){
   			throw new RuntimeException("The player password needs to be specified.");
   		}
   }
}

class Admin {
   isA UserRole;
}

class Player {
   isA UserRole;
}

class Game {
   const Integer MIN_NR_LEVELS = 1;
   const Integer MAX_NR_LEVELS = 99; // this is somewhat redundant because the max multiplicity is enforced by Umple
   const Integer PLAY_AREA_SIDE = 390; // play area is now constant
   const Integer WALL_PADDING = 10;
   const Integer COLUMNS_PADDING = 5;
   const Integer ROW_PADDING = 2;
   const Integer GRID_DIMENSIONS = 15;
   unique name;
   before constructor {
      if (aName == null) throw new RuntimeException("The name of a game must be specified.");
   }
   Integer nrBlocksPerLevel;
   before setNrBlocksPerLevel {
      if (aNrBlocksPerLevel < 1) throw new RuntimeException("The number of blocks per level must be greater than zero.");
   }
   * -- 1 Admin admin;
   1 <@>- * Block blocks;
   1 <@>- 1..99 Level levels;
   1 <@>- * BlockAssignment blockAssignments;
   1 <@>- 1 Ball ball;
   1 <@>- 1 Paddle paddle;
}

class Block {
   const Integer MIN_COLOR = 0;
   const Integer MAX_COLOR = 255;
   const Integer MIN_POINTS = 1;
   const Integer MAX_POINTS = 1000; 
   const Integer SIZE = 20;
   autounique id;
   Integer red;
   Integer green;
   Integer blue;
   Integer points;
}

// random attribute not needed anymore
// Each level is filled up with random blocks just before playing the level to reach the nrBlocksPerLevel defined in Game
class Level {
}

class BlockAssignment {
   Integer gridHorizontalPosition;
   Integer gridVerticalPosition;
   before constructor {
      if (aGridHorizontalPosition > Game.GRID_DIMENSIONS || aGridHorizontalPosition < 1) {
         throw new RuntimeException("X out of bounds.");
      }	else if (aGridVerticalPosition > Game.GRID_DIMENSIONS || aGridVerticalPosition < 1) {
         throw new RuntimeException("Y out of bounds.");
      }
   }
   * -- 1 Level level;
   * -- 1 Block block;
}

class Ball {
   const Integer BALL_DIAMETER = 10;
   Integer minBallSpeedX;
   before setMinBallSpeedX {
      if (aMinBallSpeedX <= 0) throw new RuntimeException("The minimum speed of the ball must be greater than zero.");
   }
   Integer minBallSpeedY;
   before setMinBallSpeedY {
      if (aMinBallSpeedY <= 0) throw new RuntimeException("The minimum speed of the ball must be greater than zero.");
   }
   Double ballSpeedIncreaseFactor;
   before setBallSpeedIncreaseFactor {
      if (aBallSpeedIncreaseFactor <= 0) throw new RuntimeException("The speed increase factor of the ball must be greater than zero.");
   }
}

class Paddle {
   const Integer PADDLE_WIDTH = 5;
   const Integer VERTICAL_DISTANCE = 30;
   Integer maxPaddleLength;
   before setMaxPaddleLength {
      if (aMaxPaddleLength > 390 || aMaxPaddleLength <= 0) throw new RuntimeException("The maximum length of the paddle must be greater than zero and less than or equal to 390.");
   }
   Integer minPaddleLength;
   before setMinPaddleLength {
      if (aMinPaddleLength <= 0) throw new RuntimeException("The minimum length of the paddle must be greater than zero.");
   }
}